using System;
using System.Linq;

namespace AdventOfCode
{
    class Program
    {
        static string input = "3,225,1,225,6,6,1100,1,238,225,104,0,1102,16,13,225,1001,88,68,224,101,-114,224,224,4,224,1002,223,8,223,1001,224,2,224,1,223,224,223,1101,8,76,224,101,-84,224,224,4,224,102,8,223,223,101,1,224,224,1,224,223,223,1101,63,58,225,1102,14,56,224,101,-784,224,224,4,224,102,8,223,223,101,4,224,224,1,223,224,223,1101,29,46,225,102,60,187,224,101,-2340,224,224,4,224,102,8,223,223,101,3,224,224,1,224,223,223,1102,60,53,225,1101,50,52,225,2,14,218,224,101,-975,224,224,4,224,102,8,223,223,1001,224,3,224,1,223,224,223,1002,213,79,224,101,-2291,224,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1,114,117,224,101,-103,224,224,4,224,1002,223,8,223,101,4,224,224,1,224,223,223,1101,39,47,225,101,71,61,224,101,-134,224,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,1102,29,13,225,1102,88,75,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1107,677,677,224,102,2,223,223,1006,224,329,1001,223,1,223,108,677,677,224,1002,223,2,223,1005,224,344,101,1,223,223,1008,226,226,224,102,2,223,223,1006,224,359,1001,223,1,223,1107,226,677,224,102,2,223,223,1006,224,374,1001,223,1,223,8,677,226,224,102,2,223,223,1006,224,389,101,1,223,223,8,226,226,224,102,2,223,223,1006,224,404,101,1,223,223,7,677,677,224,1002,223,2,223,1006,224,419,101,1,223,223,7,677,226,224,1002,223,2,223,1005,224,434,101,1,223,223,1108,677,226,224,1002,223,2,223,1006,224,449,1001,223,1,223,108,677,226,224,1002,223,2,223,1006,224,464,101,1,223,223,1108,226,677,224,1002,223,2,223,1006,224,479,101,1,223,223,1007,677,677,224,1002,223,2,223,1006,224,494,1001,223,1,223,107,226,226,224,102,2,223,223,1005,224,509,1001,223,1,223,1008,677,226,224,102,2,223,223,1005,224,524,1001,223,1,223,1007,226,226,224,102,2,223,223,1006,224,539,101,1,223,223,1108,677,677,224,102,2,223,223,1005,224,554,1001,223,1,223,1008,677,677,224,1002,223,2,223,1006,224,569,101,1,223,223,1107,677,226,224,1002,223,2,223,1006,224,584,1001,223,1,223,7,226,677,224,102,2,223,223,1005,224,599,101,1,223,223,108,226,226,224,1002,223,2,223,1005,224,614,101,1,223,223,107,226,677,224,1002,223,2,223,1005,224,629,1001,223,1,223,107,677,677,224,1002,223,2,223,1006,224,644,101,1,223,223,1007,677,226,224,1002,223,2,223,1006,224,659,101,1,223,223,8,226,677,224,102,2,223,223,1005,224,674,1001,223,1,223,4,223,99,226";

        static void Main(string[] args)
        {
            int[] mem = input.Split(',').Select(int.Parse).ToArray();
            Run(ref mem);
        }

        static void Run(ref int[] mem)
        {
            int instruction, ptr = 0;

            while ((instruction = mem[ptr]) != 99) // Check for the opcode
            {
                int ptr_n1 = mem[ptr + 1], ptr_n2 = mem[ptr + 2], ptr_n3 = mem[ptr + 3];
                int opmode_n1 = (instruction % 1000) / 100, opmode_n2 = (instruction % 10000) / 1000, opmode_n3 = instruction / 10000;

                int val1, val2, val3;

                switch (instruction % 100)
                {
                    case 1:
                        PrintDebug(mem, ptr, 4);
                        val1 = ((opmode_n1 == 0) ? mem[ptr_n1] : ptr_n1);
                        val2 = ((opmode_n2 == 0) ? mem[ptr_n2] : ptr_n2);
                        mem[ptr_n3] = val1 + val2;
                        ptr += 4;
                        break;
                    case 2:
                        PrintDebug(mem, ptr, 4);
                        val1 = ((opmode_n1 == 0) ? mem[ptr_n1] : ptr_n1);
                        val2 = ((opmode_n2 == 0) ? mem[ptr_n2] : ptr_n2);
                        mem[ptr_n3] = val1 * val2;
                        ptr += 4;
                        break;
                    case 3:
                        PrintDebug(mem, ptr, 2);
                        int input;
                        Console.Write("Input: ");
                        if (int.TryParse(Console.ReadLine(), out input))
                        {
                            mem[ptr_n1] = input;
                            ptr += 2;
                        }
                        else
                        {
                            Console.WriteLine("ERROR!");
                            return;
                        }
                        break;
                    case 4:
                        PrintDebug(mem, ptr, 2);
                        val1 = ((opmode_n1 == 0) ? mem[ptr_n1] : ptr_n1);
                        Console.WriteLine(val1);
                        ptr += 2;
                        break;
                    case 5:
                        PrintDebug(mem, ptr, 3);
                        val1 = ((opmode_n1 == 0) ? mem[ptr_n1] : ptr_n1);
                        val2 = ((opmode_n2 == 0) ? mem[ptr_n2] : ptr_n2);
                        if (val1 != 0)
                            ptr = val2;
                        else
                            ptr += 3;
                        break;
                    case 6:
                        PrintDebug(mem, ptr, 3);
                        val1 = ((opmode_n1 == 0) ? mem[ptr_n1] : ptr_n1);
                        val2 = ((opmode_n2 == 0) ? mem[ptr_n2] : ptr_n2);
                        if (val1 == 0)
                            ptr = val2;
                        else
                            ptr += 3;
                        break;
                    case 7:
                        PrintDebug(mem, ptr, 4);
                        val1 = ((opmode_n1 == 0) ? mem[ptr_n1] : ptr_n1);
                        val2 = ((opmode_n2 == 0) ? mem[ptr_n2] : ptr_n2);
                        val3 = ptr_n3;
                        mem[val3] = (val1 < val2) ? 1 : 0;
                        ptr += 4;
                        break;
                    case 8:
                        PrintDebug(mem, ptr, 4);
                        val1 = ((opmode_n1 == 0) ? mem[ptr_n1] : ptr_n1);
                        val2 = ((opmode_n2 == 0) ? mem[ptr_n2] : ptr_n2);
                        val3 = ptr_n3;
                        mem[val3] = (val1 == val2) ? 1 : 0;
                        ptr += 4;
                        break;
                }
            }

            Console.WriteLine("--- HALT ---");
        }

        static void PrintDebug(int[] mem, int ptr, int paramCount)
        {
            string s = $"{{{ptr.ToString("0000")}}} ";
            int instruction = mem[ptr];

            switch (instruction % 100)
            {
                case 1:
                    s += ($"[ ADD ]:");
                    break;
                case 2:
                    s += ($"[ MUL ]:");
                    break;
                case 3:
                    s += ($"[ IN  ]:");
                    break;
                case 4:
                    s += ($"[ OUT ]:");
                    break;
                case 5:
                    s += ($"[ JNZ ]:");
                    break;
                case 6:
                    s += ($"[ JZ  ]:");
                    break;
                case 7:
                    s += ($"[ JL  ]:");
                    break;
                case 8:
                    s += ($"[ JE  ]:");
                    break;
            }

            s += $" {instruction.ToString("00000")} | ";

            var opmodes = new int[] { (instruction % 1000) / 100, (instruction % 10000) / 1000, instruction / 10000 };

            foreach (var i in Enumerable.Range(ptr + 1, paramCount - 1))
            {
                if (opmodes[i - (ptr + 1)] == 0)
                {
                    if (i == ptr + paramCount - 1)
                        s += ($"${mem[i]}");
                    else
                        s += ($"${mem[i]} [#{mem[mem[i]]}]");
                }
                else
                {
                    s += ($"#{mem[i]}");
                }
                s += (", ");
            }

            s = s.Substring(0, s.Length - 2);

            Console.WriteLine(s);
        }
    }
}
